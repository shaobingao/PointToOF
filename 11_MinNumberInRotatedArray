/**
 * 把一个数组最开始的若干个元素搬到数组的末尾，我们称之为数组的旋转。 输入一个非减排序的数组的一个旋转，输出旋转数组的最小元素。
 * 例如数组{3,4,5,1,2}为{1,2,3,4,5}的一个旋转，该数组的最小值为1。 NOTE：给出的所有元素都大于0，若数组大小为0，请返回0。
 */

/**
 * (1)array[mid] > array[high]:
 * 出现这种情况的array类似[3,4,5,6,0,1,2]，此时最小数字一定在mid的右边。
 * low = mid + 1
 * (2)array[mid] == array[high]:
 * 出现这种情况的array类似 [1,0,1,1,1] 或者[1,1,1,0,1]，此时最小数字不好判断在mid左边
 * 还是右边,这时只好一个一个试 ，
 * high = high - 1
 * (3)array[mid] < array[high]:
 * 出现这种情况的array类似[2,2,3,4,5,6,6],此时最小数字一定就是array[mid]或者在mid的左
 * 边。因为右边必然都是递增的。
 * high = mid
 */
public class Solution {
    public int minNumberInRotateArray(int [] array) {
        if(array.length == 0)
            return 0;
        int index1 = 0;
        int index2 = array.length - 1;
        int indexMid = index1;//此处考虑移动0个元素，及整个数组是从小到大递增，那么最小的数就是第一个
        while(array[index1] >= array[index2]){
            if((index2-index1)==1){
                indexMid = index2;
                break;
            }
            indexMid = index1 + (index2 - index1)/2;

            /**
             * 特殊情况：出现这种情况的array类似 [1,0,1,1,1] 或者[1,1,1,0,1]，此时最小数字不好判断在mid左边
             * 还是右边,这时只好一个一个试 
             */
            if(array[indexMid] == array[index1]&&array[index1]== array[index2])
                return MinInOder(array,index1,index2);

            if(array[indexMid] >= array[index1])
                index1 = indexMid;
            else if(array[indexMid] <= array[index2])
                index2 = indexMid;
        }
        return array[indexMid];

    }

    public static int MinInOder(int []array,int index1,int index2){
        int result = array[index1];
        for(int i = index1;i<=index2;i++){
            if(result > array[i])
                result = array[i];
        }
        return result;
    }
}
