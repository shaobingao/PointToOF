

/**
 * 地上有一个m行和n列的方格。一个机器人从坐标0,0的格子开始移动，
 * 每一次只能向左，右，上，下四个方向移动一格，但是不能进入行坐标和列坐标的数位之和大于k的格子。
 * 例如，当k为18时，机器人能够进入方格（35,37），因为3+5+3+7 = 18。但是，它不能进入方格（35,38），
 * 因为3+5+3+8 = 19。请问该机器人能够达到多少个格子？
 */

/**
 * 核心思路：
 * 1.从(0,0)开始走，每成功走一步标记当前位置为true,然后从当前位置往四个方向探索，
 * 返回1 + 4 个方向的探索值之和。
 * 2.探索时，判断当前节点是否可达的标准为：
 * 1）当前节点在矩阵内；
 * 2）当前节点未被访问过；
 * 3）当前节点满足limit限制。
 */
public class wrk8 {
    public int movingCount(int threshold, int rows, int cols)
    {

        int count = 0;
        if( rows<1 || cols < 1 || threshold < 0)
            return 0;
        int flag[] = new int[rows*cols];
        for (int i=0;i<rows*cols;i++){
            flag[i] = 0;
        }
        count = movingCountCore(threshold,rows,cols,0,0,flag);
        return count;

    }

    private int movingCountCore(int threshold, int rows, int cols,int row ,int col ,int flag[]) {

        int index = row*cols+col;
//        if(row< 0 || row >= rows || col < 0|| col >= cols )
//            return 0;
//        if(flag[index] == 1 || !checkSum(threshold,row,col))
//            return 0;
//
//        flag[index] = 1;
//        return 1+ movingCountCore(threshold,rows,cols,row-1,col,flag)
//                    +movingCountCore(threshold,rows,cols,row+1,col,flag)
//                    +movingCountCore(threshold,rows,cols,row,col-1,flag)
//                    +movingCountCore(threshold,rows,cols,row,col+1,flag);
        if(row< 0 || row >= rows || col < 0|| col >= cols ||flag[index] == 1)
            return 0;

        if(checkSum(threshold,row,col)) {
            flag[index] = 1;
            return 1 + movingCountCore(threshold, rows, cols, row - 1, col, flag)
                    + movingCountCore(threshold, rows, cols, row + 1, col, flag)
                    + movingCountCore(threshold, rows, cols, row, col - 1, flag)
                    + movingCountCore(threshold, rows, cols, row, col + 1, flag);
        }

        return 0;

    }

    private boolean checkSum(int threshold, int row, int col){
        int sum = 0;
        while(row!=0){
            sum =sum + row % 10;
            row = row/10;
        }
        while(col!=0){
            sum = sum + col % 10;
            col = col/10;
        }
        if(sum <= threshold)
            return true;
        else
            return false;
    }
}
