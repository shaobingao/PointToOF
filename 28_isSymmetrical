
/*
public class TreeNode {
    int val = 0;
    TreeNode left = null;
    TreeNode right = null;

    public TreeNode(int val) {
        this.val = val;

    }

}
*/
/**
 * 请实现一个函数，用来判断一颗二叉树是不是对称的。
 * 注意，如果一个二叉树同此二叉树的镜像是同样的，定义其为对称的。
 */

/**思路：首先根节点以及其左右子树，左子树的左子树和右子树的右子树相同
 * 左子树的右子树和右子树的左子树相同即可，采用递归
 * 非递归也可，采用栈或队列存取各级子树根节点
 */
public class A28_isSymmetrical {
    boolean isSymmetrical(TreeNode pRoot)
    {

        if(pRoot == null)
            return true;
        return f(pRoot.left,pRoot.right);

    }

    private boolean f(TreeNode f1, TreeNode f2) {
        if(f1 == null&& f2 == null){
            return true;
        }
        if(f1 != null&& f2 != null){
            return f1.val == f2.val && f(f1.left,f2.right) && f(f1.right,f2.left);
        }
        return false;
    }

}
