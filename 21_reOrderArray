

/**
 * 输入一个整数数组，实现一个函数来调整该数组中数字的顺序，使得所有的奇数位于数组的前半部分，
 * 所有的偶数位于位于数组的后半部分，并保证奇数和奇数，偶数和偶数之间的相对位置不变。
 */

/**
 * 1.要想保证原有次序，则只能顺次移动或相邻交换。
 * 2.i从左向右遍历，找到第一个偶数。
 * 3.j从i+1开始向后找，直到找到第一个奇数。
 * 4.将[i,...,j-1]的元素整体后移一位，最后将找到的奇数放入i位置，然后i++。
 * 5.終止條件：j向後遍歷查找失敗。
 */
public class A21_reOrderArray {
    public static void reOrderArray(int [] array) {
        if(array == null || array.length <= 1)
            return;
        int pstart = 0;
        int pend;
        while (pstart < array.length){
            //移动第一个指数向后，直到遇到偶数
            while (pstart < array.length && (array[pstart] & 0x1) != 0 )
                pstart ++;

            pend = pstart +1;

            //移动第二个指数向后，直到遇到奇数
            while (pend < array.length && (array[pend] & 0x1) == 0 )
                pend ++;

            if(pend < array.length){
                int temp = array[pend];
                for (int j = pend;j>pstart;j--){
                    array[j] = array[j-1];
                }
                array[pstart] = temp;
            }
            else
                break;

        }

    }

    public static void main(String args[]){
        int [] array = {1,2,3,4,5,6,7};
        reOrderArray(array);
       for(int i = 0;i<array.length;i++){
           System.out.println(array[i]);
       }

    }
}
//[1,2,3,4,5,6,7]
//1 32 4567

//[1,3,5,7,2,4,6]
//[1,7,3,5,4,6,2]
