import java.util.ArrayList;
import java.util.Stack;

/**
 * 输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否可能为该栈的弹出顺序。假设压入栈的所有数字均不相等。
 * 例如序列1,2,3,4,5是某栈的压入顺序，序列4,5,3,2,1是该压栈序列对应的一个弹出序列，
 * 但4,3,5,1,2就不可能是该压栈序列的弹出序列。（注意：这两个序列的长度是相等的）
 */

/**
 * 【思路】借用一个辅助的栈，遍历压栈顺序
 */
public class A31_IsPopOrder {
    public static boolean IsPopOrder(int [] pushA,int [] popA) {

        if( pushA == null || popA == null || popA.length != pushA.length|| popA.length<1)
            return false;
        Stack<Integer> stack = new Stack<>();
        boolean flag = false;
        int p_push = 0;
        int p_pop = 0;
        int length = pushA.length;
        //遍历第一个数组pushA，如果与第二数组popA不相等，则pushA中的数字入栈，p_push前进1，
        //如果相等，则p_push和p_pop都前进
        while (p_push < length){
            if(pushA[p_push] != popA[p_pop]){
                stack.push(pushA[p_push]);
                p_push ++;
            }else {
                p_push ++;
                p_pop ++;
            }

        }
        //若popA还有数字，遍历剩下的popA数组，与栈中的数字对比，如果有不等的则错误
        while (p_pop < length){
            if(popA[p_pop] != stack.pop()){
                return false;
            }else {
                p_pop++;
            }
        }
        return true;

    }
    public static void main(String args[]){
        int aa[] = {1,2,3,4,5};
        int bb[] = {4,5,3,2,1};
        System.out.print(IsPopOrder(aa,bb));
    }
}
