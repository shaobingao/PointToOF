/**
 * 题目描述
 * 输入一个复杂链表（每个节点中有节点值，以及两个指针，一个指向下一个节点，
 * 另一个特殊指针指向任意一个节点），返回结果为复制后复杂链表的head。
 * （注意，输出结果中请不要返回参数中的节点引用，否则判题程序会直接返回空）
 */
/*
public class RandomListNode {
    int label;
    RandomListNode next = null;
    RandomListNode random = null;

    RandomListNode(int label) {
        this.label = label;
    }
}
*/
public class A35_RandomListNode {
    public RandomListNode Clone(RandomListNode pHead)
    {
        if(pHead==null)
            return null;
        RandomListNode pCur = pHead;
        //复制next 如原来是A->B->C 变成A->A'->B->B'->C->C'
        while (pCur != null){
            RandomListNode pclone = new RandomListNode(pCur.label);
            pclone.next = pCur.next;
            pCur.next = pclone;
            pCur = pclone.next;
        }
        pCur = pHead;
        //复制random pCur是原来链表的结点 pCur.next是复制pCur的结点
        while (pCur != null){
            /**
             * 注意要添加if判断
             */
            if(pCur.random!=null)
                pCur.next.random = pCur.random.next;
            pCur = pCur.next.next;
        }

        //拆分链表
        RandomListNode pcloneHead = pHead.next;
        RandomListNode p_clone = pcloneHead;
        pCur = pHead;
        while (pCur != null){
            pCur.next = pCur.next.next;
            /**
             * 注意要添加if判断，因为clone的数组的最后一个数字的next为空，如果再p_clone.next.next就有问题
             */
            if(p_clone.next!=null)
                p_clone.next = p_clone.next.next;
            p_clone = p_clone.next;
            pCur = pCur.next;
        }
        return pcloneHead;

    }
}
