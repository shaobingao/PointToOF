

/**
 * 给定一个double类型的浮点数base和int类型的整数exponent。求base的exponent次方。
 *
 * 本题关键在于要考虑当底数为0，指数是负数的时候要做异常处理
 */
public class wrk9 {

    public double Power(double base, int exponent) {

        double result = 0.0;
            if (base == 0.0 && exponent < 0) {
                return -1;

            }

            int absexp = exponent;
            if (exponent < 0)
                absexp = -exponent;

            result = powerWithExponent(base, absexp);
            if (exponent < 0)
                result = 1.0 / result;
            return result;

    }

    /**
     * 递归：n为偶数，a^n=a^n/2*a^n/2;n为奇数，a^n=（a^（n-1）/2）*（a^（n-1/2））*a
     * 时间复杂度O（logn）
     * @param base
     * @param exponent
     * @return
     */
    private double powerWithExponent(double base, int exponent) {
        if(exponent == 0)
            return 1;
        if(exponent == 1)
            return base;
        double result = powerWithExponent(base,exponent>>1);//exponent>>1相当于除以2
        result *= result;
        if((exponent&0x1)== 1){ //exponent&0x1)== 1相当于取余数看是否是奇数
            result = result*base;
        }
        return result;

    }
    /**
     * 思路3：用数字排列的方法表示：如果我们在数字前面补0的话，就会发现n位所有十进制数其实就是n个从0到9的全排列。
     * 也就是说，我们把数字的每一位都从0到9排列一遍，就得到了所有的十进制数。当然打印的时候，我们应该将前面的0补位去掉。
     * @param 
     */
    public static void Print1ToMaxOfNDigits_3(int n){
        if(n < 0){
            return;
        }
        StringBuffer s = new StringBuffer(n);
        for(int i = 0; i < n; i++){
            s.append('0');
        }
        for(int i = 0; i < 10; i++){

            s.setCharAt(0, (char) (i+'0'));
            Print1ToMaxOfNDigits_3_Recursely(s, n, 0);
        }

    }
    public static void Print1ToMaxOfNDigits_3_Recursely(StringBuffer s, int n , int index){
        if(index == n - 1){
            PrintNumber(s);
            return;
        }

        for(int i = 0; i < 10; i++){
            s.setCharAt(index+1, (char) (i+'0'));
            Print1ToMaxOfNDigits_3_Recursely(s, n, index+1);
        }
    }

    public static void main(String args[]){
        System.out.println(new wrk9().Power(0.0,-2));

    }
}
