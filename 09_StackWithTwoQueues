import java.util.ArrayDeque;
import java.util.Queue;

/**
 * 用两个队列实现一个栈的功能?要求给出算法和思路!
 * <分析>：
 * 入栈：将元素进队列A
 * 出栈：判断队列A中元素的个数是否为1，如果等于1，则出队列，否则将队列A中的元素
 * 以此出队列并放入队列B，直到队列A中的元素留下一个，然后队列A出队列，再把   队列B中的元素出队列以此放入队列A中。
 */
public class A09_StackWithTwoQueues {
    Queue<Integer> queue1 = new ArrayDeque<Integer>();
    Queue<Integer> queue2= new ArrayDeque<Integer>();

    public void push(int node) {
        //两个队列都为空时，优先考虑 queue1
        if (queue1.isEmpty()&&queue2.isEmpty()){
            queue1.add(node);
            return;
        }
//如果queue2为空，queue1有数据，直接放入queue1中
        if(!queue1.isEmpty()){
            queue1.add(node);
            return;
        }
//如果queue1为空，queue2有数据，直接放入queue
        if(!queue2.isEmpty()){
            queue2.add(node);
            return;
        }

    }

    public int pop(){
        //如果两个栈都为空，则没有元素可以弹出，异常
        if(queue1.isEmpty() && queue2.isEmpty()){
            throw new RuntimeException("satck is empty!");
        }
//如果queue2中没有元素，queue1中有元素，将其queue1中的元素依次放入queue2中，直到最后一个元素，弹出即可
        if(!queue1.isEmpty()){
            while (queue1.size()>1){
                queue2.add(queue1.poll());
            }
            return queue1.poll();
        }
        //如果queue1中没有元素，queue2中有元素，将其queue2中的元素依次放入queue1中，直到最后一个元素，弹出即可
        if(!queue2.isEmpty()){
            while (queue2.size()>1){
                queue1.add(queue2.poll());
            }
            return queue2.poll();
        }

        return (Integer)null;

    }

    public static void main(String[] args) {
        A09_StackWithTwoQueues qs = new A09_StackWithTwoQueues();
        qs.push(2);
        qs.push(4);
        qs.push(7);
        qs.push(5);
        System.out.println(qs.pop());
        System.out.println(qs.pop());

        qs.push(1);
        System.out.println(qs.pop());
    }

}
