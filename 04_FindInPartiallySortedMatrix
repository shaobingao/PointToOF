package com.pointTo;

//题目描述
//      在一个二维数组中，
// 每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。
// 请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。
public class A04_FindInPartiallySortedMatrix {
    public boolean Find(int target, int [][] array) {
        boolean found = false;
        int rows = array.length;
        int columns = array[0].length;
        if( array == null || array.length == 0 || array[0].length == 0){
            return found;
        }
        else{
            int row = 0;
            int column = columns-1;
            while(row < rows && column >= 0)
            {
                if (array[row][column] == target){
                    found = true ;
                    break;
                }
                else if(array[row][column] < target){
                    row = row + 1;
                }
                else{
                    column = column - 1;
                }
            }
            return  found;


        }

    }

    // ====================测试代码====================
    public void Test(String testName,int array[][], int rows, int columns, int number, boolean expected)
    {
        if(testName != null)
            System.out.println(testName);

        boolean result = Find(number,array);
        if(result == expected)
            System.out.println("Passed.\n");
        else
            System.out.println("Failed.\n");
    }

    //  1   2   8   9
//  2   4   9   12
//  4   7   10  13
//  6   8   11  15
// 要查找的数在数组中
    public  void Test1()
    {
//        int matrix[][4] = {{1, 2, 8, 9}, {2, 4, 9, 12}, {4, 7, 10, 13}, {6, 8, 11, 15}};
        int matrixa[][] = {{1,2,8,9},{2,4,9,12},{4,7,10,13},{6,8,11,15}};
        Test("Test1", matrixa, 4, 4, 7, true);
    }

//    //  1   2   8   9
////  2   4   9   12
////  4   7   10  13
////  6   8   11  15
//// 要查找的数不在数组中
    public void Test2()
    {
        int matrix[][] = {{1, 2, 8, 9}, {2, 4, 9, 12}, {4, 7, 10, 13}, {6, 8, 11, 15}};
        Test("Test2", matrix, 4, 4, 5, false);
    }

    //  1   2   8   9
//  2   4   9   12
//  4   7   10  13
//  6   8   11  15
// 要查找的数是数组中最小的数字
    void Test3()
    {
        int matrix[][] = {{1, 2, 8, 9}, {2, 4, 9, 12}, {4, 7, 10, 13}, {6, 8, 11, 15}};
        Test("Test3", matrix, 4, 4, 1, true);
    }

    //  1   2   8   9
//  2   4   9   12
//  4   7   10  13
//  6   8   11  15
// 要查找的数是数组中最大的数字
    void Test4()
    {
        int matrix[][] = {{1, 2, 8, 9}, {2, 4, 9, 12}, {4, 7, 10, 13}, {6, 8, 11, 15}};
        Test("Test4", matrix, 4, 4, 15, true);
    }

    //  1   2   8   9
//  2   4   9   12
//  4   7   10  13
//  6   8   11  15
// 要查找的数比数组中最小的数字还小
    void Test5()
    {
        int matrix[][] = {{1, 2, 8, 9}, {2, 4, 9, 12}, {4, 7, 10, 13}, {6, 8, 11, 15}};
        Test("Test5", matrix, 4, 4, 0, false);
    }

    //  1   2   8   9
//  2   4   9   12
//  4   7   10  13
//  6   8   11  15
// 要查找的数比数组中最大的数字还大
    void Test6()
    {
        int matrix[][] = {{1, 2, 8, 9}, {2, 4, 9, 12}, {4, 7, 10, 13}, {6, 8, 11, 15}};
        Test("Test6", matrix, 4, 4, 16, false);
    }

    // 鲁棒性测试，输入空指针
    void Test7()
    {
        int matrix[][] = new int[0][0];
        Test("Test7", matrix, 0, 0, 16, false);
    }

    public static void main(String[] args){

        new A04_FindInPartiallySortedMatrix().Test1();
        new A04_FindInPartiallySortedMatrix().Test2();
        new A04_FindInPartiallySortedMatrix().Test3();
        new A04_FindInPartiallySortedMatrix().Test4();
        new A04_FindInPartiallySortedMatrix().Test5();
        new A04_FindInPartiallySortedMatrix().Test6();
        new A04_FindInPartiallySortedMatrix().Test7();


    }
}

/*
解题思路：
首先选取数组中右上角的数字。如果该数字等于要查找的数字，则查找过程结束；如果该数字大于要查找的数字，则剔除这个数字所在的列；
如果该数字小于要查找的数字，如果该数字小于要查找的数字，则剔除这个数字所在的行。也就是说，如果要查找的数字不在数组的右上角，
则每一次都在数组的查找范围中剔除一行或者一列，这样每一步都可以缩小查找的范围，直到找到要查找的数字，或者查找范围为空。
同时也可以选择左下角。
 */
